{"version":3,"file":"redux-multicall.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/callKeys.ts","../src/utils/callState.ts","../src/validation.ts","../src/hooks.ts","../src/slice.ts","../src/utils/retry.ts","../src/updater.tsx","../src/utils/useDebounce.ts","../src/utils/chunkCalls.ts","../src/create.ts"],"sourcesContent":["import type { CallResult, CallState, ListenerOptions } from './types'\n\nexport const DEFAULT_BLOCKS_PER_FETCH = 1\nexport const DEFAULT_CALL_GAS_REQUIRED = 1_000_000\nexport const DEFAULT_CHUNK_GAS_REQUIRED = 200_000\nexport const CHUNK_GAS_LIMIT = 100_000_000\nexport const CONSERVATIVE_BLOCK_GAS_LIMIT = 10_000_000 // conservative, hard-coded estimate of the current block gas limit\n\n// Consts for hooks\nexport const INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\nexport const INVALID_CALL_STATE: CallState = {\n  valid: false,\n  result: undefined,\n  loading: false,\n  syncing: false,\n  error: false,\n}\nexport const LOADING_CALL_STATE: CallState = {\n  valid: true,\n  result: undefined,\n  loading: true,\n  syncing: true,\n  error: false,\n}\n","import { Call } from '../types'\n\nexport function toCallKey(call: Call): string {\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n\nexport function callsToCallKeys(calls?: Array<Call | undefined>) {\n  return (\n    calls\n      ?.filter((c): c is Call => Boolean(c))\n      ?.map(toCallKey)\n      ?.sort() ?? []\n  )\n}\n\nexport function callKeysToCalls(callKeys: string[]) {\n  if (!callKeys?.length) return null\n  return callKeys.map((key) => parseCallKey(key))\n}\n","import type { FunctionFragment, Interface } from '@ethersproject/abi'\nimport { useMemo } from 'react'\nimport { INVALID_CALL_STATE, LOADING_CALL_STATE } from '../constants'\nimport type { CallResult, CallState, CallStateResult } from '../types'\n\n// Converts CallResult[] to CallState[], only updating if call states have changed.\n// Ensures that CallState results remain referentially stable when unchanged, preventing\n// spurious re-renders which would otherwise occur because mapping always creates a new object.\nexport function useCallStates(\n  results: CallResult[],\n  contractInterface: Interface | undefined,\n  fragment: ((i: number) => FunctionFragment | undefined) | FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState[] {\n  // Avoid refreshing the results with every changing block number (eg latestBlockNumber).\n  // Instead, only refresh the results if they need to be synced - if there is a result which is stale, for which blockNumber < latestBlockNumber.\n  const syncingBlockNumber = useMemo(() => {\n    const lowestBlockNumber = results.reduce<number | undefined>(\n      (memo, result) => (result.blockNumber ? Math.min(memo ?? result.blockNumber, result.blockNumber) : memo),\n      undefined\n    )\n    return Math.max(lowestBlockNumber ?? 0, latestBlockNumber ?? 0)\n  }, [results, latestBlockNumber])\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const resultFragment = typeof fragment === 'function' ? fragment(i) : fragment\n      return toCallState(result, contractInterface, resultFragment, syncingBlockNumber)\n    })\n  }, [contractInterface, fragment, results, syncingBlockNumber])\n}\n\nexport function toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  syncingBlockNumber: number | undefined\n): CallState {\n  if (!callResult || !callResult.valid) {\n    return INVALID_CALL_STATE\n  }\n\n  const { data, blockNumber } = callResult\n  if (!blockNumber || !contractInterface || !fragment || !syncingBlockNumber) {\n    return LOADING_CALL_STATE\n  }\n\n  const success = data && data.length > 2\n  const syncing = blockNumber < syncingBlockNumber\n  let result: CallStateResult | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport type MethodArg = string | number | BigNumber\nexport type MethodArgs = Array<MethodArg | MethodArg[]>\n\nexport function isMethodArg(x: unknown): x is MethodArg {\n  return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nexport function isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { Interface } from '@ethersproject/abi'\nimport { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { batch, useDispatch, useSelector } from 'react-redux'\nimport { INVALID_CALL_STATE, INVALID_RESULT, DEFAULT_BLOCKS_PER_FETCH } from './constants'\nimport type { MulticallContext } from './context'\nimport type { Call, CallResult, CallState, ListenerOptions, ListenerOptionsWithGas, WithMulticallState } from './types'\nimport { callKeysToCalls, callsToCallKeys, toCallKey } from './utils/callKeys'\nimport { toCallState, useCallStates } from './utils/callState'\nimport { isValidMethodArgs, MethodArg } from './validation'\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\n// the lowest level call for subscribing to contract data\nexport function useCallsDataSubscription(\n  context: MulticallContext,\n  chainId: number | undefined,\n  calls: Array<Call | undefined>,\n  listenerOptions?: ListenerOptions\n): CallResult[] {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n  const serializedCallKeys: string = useMemo(() => JSON.stringify(callsToCallKeys(calls)), [calls])\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    const calls = callKeysToCalls(callKeys)\n    if (!chainId || !calls) return\n    const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n    const blocksPerFetchForChain =\n      listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n    dispatch(\n      actions.addMulticallListeners({\n        chainId,\n        calls,\n        options: { blocksPerFetch: blocksPerFetchForChain },\n      })\n    )\n\n    return () => {\n      dispatch(\n        actions.removeMulticallListeners({\n          chainId,\n          calls,\n          options: { blocksPerFetch: blocksPerFetchForChain },\n        })\n      )\n    }\n  }, [actions, chainId, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  const lastResults = useRef<CallResult[]>([])\n  return useMemo(() => {\n    let isChanged = lastResults.current.length !== calls.length\n\n    // Construct results using a for-loop to handle sparse arrays.\n    // Array.prototype.map would skip empty entries.\n    let results: CallResult[] = []\n    for (let i = 0; i < calls.length; ++i) {\n      const call = calls[i]\n      let result = INVALID_RESULT\n      if (chainId && call) {\n        const callResult = callResults[chainId]?.[toCallKey(call)]\n        result = {\n          valid: true,\n          data: callResult?.data && callResult.data !== '0x' ? callResult.data : undefined,\n          blockNumber: callResult?.blockNumber,\n        }\n      }\n\n      isChanged = isChanged || !areCallResultsEqual(result, lastResults.current[i])\n      results.push(result)\n    }\n\n    // Force the results to be referentially stable if they have not changed.\n    // This is necessary because *all* callResults are passed as deps when initially memoizing the results.\n    if (isChanged) {\n      lastResults.current = results\n    }\n    return lastResults.current\n  }, [callResults, calls, chainId])\n}\n\nfunction areCallResultsEqual(a: CallResult, b: CallResult) {\n  return a.valid === b.valid && a.data === b.data && a.blockNumber === b.blockNumber\n}\n\n// Similar to useCallsDataSubscription above but for subscribing to\n// calls to multiple chains at once\nfunction useMultichainCallsDataSubscription(\n  context: MulticallContext,\n  chainToCalls: Record<number, Array<Call | undefined>>,\n  listenerOptions?: ListenerOptions\n): Record<number, CallResult[]> {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n\n  const serializedCallKeys: string = useMemo(() => {\n    const sortedChainIds = getChainIds(chainToCalls).sort()\n    const chainCallKeysTuple = sortedChainIds.map((chainId) => {\n      const calls = chainToCalls[chainId]\n      const callKeys = callsToCallKeys(calls)\n      // Note, using a tuple to ensure consistent order when serialized\n      return [chainId, callKeys]\n    })\n    return JSON.stringify(chainCallKeysTuple)\n  }, [chainToCalls])\n\n  useEffect(() => {\n    const chainCallKeysTuples: Array<[number, string[]]> = JSON.parse(serializedCallKeys)\n    if (!chainCallKeysTuples?.length) return\n\n    batch(() => {\n      for (const [chainId, callKeys] of chainCallKeysTuples) {\n        const calls = callKeysToCalls(callKeys)\n        if (!calls?.length) continue\n        const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n        const blocksPerFetchForChain =\n          listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n        dispatch(\n          actions.addMulticallListeners({\n            chainId,\n            calls,\n            options: { blocksPerFetch: blocksPerFetchForChain },\n          })\n        )\n      }\n    })\n\n    return () => {\n      batch(() => {\n        for (const [chainId, callKeys] of chainCallKeysTuples) {\n          const calls = callKeysToCalls(callKeys)\n          if (!calls?.length) continue\n          const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n          const blocksPerFetchForChain =\n            listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n          dispatch(\n            actions.removeMulticallListeners({\n              chainId,\n              calls,\n              options: { blocksPerFetch: blocksPerFetchForChain },\n            })\n          )\n        }\n      })\n    }\n  }, [actions, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  return useMemo(\n    () =>\n      getChainIds(chainToCalls).reduce((result, chainId) => {\n        const calls = chainToCalls[chainId]\n        result[chainId] = calls.map<CallResult>((call) => {\n          if (!chainId || !call) return INVALID_RESULT\n          const result = callResults[chainId]?.[toCallKey(call)]\n          const data = result?.data && result.data !== '0x' ? result.data : undefined\n          return { valid: true, data, blockNumber: result?.blockNumber }\n        })\n        return result\n      }, {} as Record<number, CallResult[]>),\n    [callResults, chainToCalls]\n  )\n}\n\n// formats many calls to a single function on a single contract, with the function name and inputs specified\nexport function useSingleContractMultipleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create ethers function fragment\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  // Get encoded call data. Note can't use useCallData below b.c. this is  for a list of CallInputs\n  const callDatas = useMemo(() => {\n    if (!contract || !fragment) return []\n    return callInputs.map<string | undefined>((callInput) =>\n      isValidMethodArgs(callInput) ? contract.interface.encodeFunctionData(fragment, callInput) : undefined\n    )\n  }, [callInputs, contract, fragment])\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call | undefined>((callData) => {\n      if (!callData) return undefined\n      return {\n        address: contract.address,\n        callData,\n        gasRequired,\n      }\n    })\n  }, [contract, callDatas, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  return useCallStates(results, contract?.interface, fragment, latestBlockNumber)\n}\n\nexport function useMultipleContractSingleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!callData) return []\n    return addresses.map<Call | undefined>((address) => {\n      if (!address) return undefined\n      return { address, callData, gasRequired }\n    })\n  }, [addresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  return useCallStates(results, contractInterface, fragment, latestBlockNumber)\n}\n\nexport function useSingleCallResult(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState {\n  const callInputs = useMemo(() => [inputs], [inputs])\n  return (\n    useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, callInputs, options)[0] ??\n    INVALID_CALL_STATE\n  )\n}\n\n// formats many calls to any number of functions on a single contract, with only the calldata specified\nexport function useSingleContractWithCallData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  callDatas: string[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call>((callData) => ({\n      address: contract.address,\n      callData,\n      gasRequired,\n    }))\n  }, [callDatas, contract, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  const fragment = useCallback(\n    (i: number) => contract?.interface?.getFunction(callDatas[i].substring(0, 10)),\n    [callDatas, contract]\n  )\n  return useCallStates(results, contract?.interface, fragment, latestBlockNumber)\n}\n\n// Similar to useMultipleContractSingleData but instead of multiple contracts on one chain,\n// this is for querying compatible contracts on multiple chains\nexport function useMultiChainMultiContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddresses: Record<number, Array<string | undefined>>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState[]> {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const chainToCalls = useMemo(() => {\n    if (!callData || !chainToAddresses) return {}\n    return getChainIds(chainToAddresses).reduce((result, chainId) => {\n      const addresses = chainToAddresses[chainId]\n      const calls = addresses.map<Call | undefined>((address) => {\n        if (!address) return undefined\n        return { address, callData, gasRequired }\n      })\n      result[chainId] = calls\n      return result\n    }, {} as Record<number, Array<Call | undefined>>)\n  }, [chainToAddresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const chainIdToResults = useMultichainCallsDataSubscription(context, chainToCalls, options as ListenerOptions)\n\n  // TODO(WEB-2097): Multichain states are not referentially stable, because they cannot use the\n  // same codepath (eg useCallStates).\n  return useMemo(() => {\n    return getChainIds(chainIdToResults).reduce((combinedResults, chainId) => {\n      const latestBlockNumber = chainToBlockNumber?.[chainId]\n      const results = chainIdToResults[chainId]\n      combinedResults[chainId] = results.map((result) =>\n        toCallState(result, contractInterface, fragment, latestBlockNumber)\n      )\n      return combinedResults\n    }, {} as Record<number, CallState[]>)\n  }, [fragment, contractInterface, chainIdToResults, chainToBlockNumber])\n}\n\n// Similar to useSingleCallResult but instead of one contract on one chain,\n// this is for querying a contract on multiple chains\nexport function useMultiChainSingleContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddress: Record<number, string | undefined>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState> {\n  // This hook uses the more flexible useMultiChainMultiContractSingleData internally,\n  // but transforms the inputs and outputs for convenience\n  const chainIdToAddresses = useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = [chainToAddress[chainId]]\n      return result\n    }, {} as Record<number, Array<string | undefined>>)\n  }, [chainToAddress])\n\n  const multiContractResults = useMultiChainMultiContractSingleData(\n    context,\n    chainToBlockNumber,\n    chainIdToAddresses,\n    contractInterface,\n    methodName,\n    callInputs,\n    options\n  )\n\n  return useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = multiContractResults[chainId]?.[0] ?? INVALID_CALL_STATE\n      return result\n    }, {} as Record<number, CallState>)\n  }, [chainToAddress, multiContractResults])\n}\n\nfunction useCallData(\n  methodName: string,\n  contractInterface: Interface | null | undefined,\n  callInputs: OptionalMethodInputs | undefined\n) {\n  // Create ethers function fragment\n  const fragment = useMemo(() => contractInterface?.getFunction(methodName), [contractInterface, methodName])\n  // Get encoded call data\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface?.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n  return { fragment, callData }\n}\n\nfunction getChainIds(chainIdMap: Record<number, any>) {\n  return Object.keys(chainIdMap).map((c) => parseInt(c, 10))\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  MulticallFetchingPayload,\n  MulticallListenerPayload,\n  MulticallResultsPayload,\n  MulticallState,\n  MulticallListenerOptionsPayload,\n} from './types'\nimport { toCallKey } from './utils/callKeys'\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport function createMulticallSlice(reducerPath: string) {\n  return createSlice({\n    name: reducerPath,\n    initialState,\n    reducers: {\n      addMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n        listeners[chainId] = listeners[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n          listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n        })\n      },\n\n      removeMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n\n      fetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current) {\n            state.callResults[chainId][callKey] = {\n              fetchingBlockNumber,\n            }\n          } else {\n            if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n            state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      errorFetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current || typeof current.fetchingBlockNumber !== 'number') return // only should be dispatched if we are already fetching\n          if (current.fetchingBlockNumber <= fetchingBlockNumber) {\n            delete current.fetchingBlockNumber\n            current.data = null\n            current.blockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      updateMulticallResults: (state, action: PayloadAction<MulticallResultsPayload>) => {\n        const { chainId, results, blockNumber } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        Object.keys(results).forEach((callKey) => {\n          const current = state.callResults[chainId][callKey]\n          if ((current?.blockNumber ?? 0) > blockNumber) return\n          if (current?.data === results[callKey] && current?.blockNumber === blockNumber) return\n          state.callResults[chainId][callKey] = {\n            data: results[callKey],\n            blockNumber,\n          }\n        })\n      },\n\n      updateListenerOptions: (state, action: PayloadAction<MulticallListenerOptionsPayload>) => {\n        const { chainId, listenerOptions } = action.payload\n        state.listenerOptions = state.listenerOptions ?? {}\n        state.listenerOptions[chainId] = listenerOptions\n      },\n    },\n  })\n}\n\nexport type MulticallActions = ReturnType<typeof createMulticallSlice>['actions']\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/utils/retry.ts\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nclass CancelledError extends Error {\n  public isCancelledError: true = true\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {\n  public isRetryableError: true = true\n}\n\nexport interface RetryOptions {\n  n: number\n  minWait: number\n  maxWait: number\n}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: RetryOptions\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error as any).isRetryableError) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n","import React, { Dispatch, useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { UniswapInterfaceMulticall } from './abi/types'\nimport { CHUNK_GAS_LIMIT, DEFAULT_CALL_GAS_REQUIRED } from './constants'\nimport type { MulticallContext } from './context'\nimport type { MulticallActions } from './slice'\nimport type { Call, MulticallState, WithMulticallState, ListenerOptions } from './types'\nimport { parseCallKey, toCallKey } from './utils/callKeys'\nimport chunkCalls from './utils/chunkCalls'\nimport { retry, RetryableError } from './utils/retry'\nimport useDebounce from './utils/useDebounce'\n\nconst FETCH_RETRY_CONFIG = {\n  n: Infinity,\n  minWait: 1000,\n  maxWait: 2500,\n}\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicall multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param blockNumber block number passed as the block tag in the eth_call\n */\nasync function fetchChunk(\n  multicall: UniswapInterfaceMulticall,\n  chunk: Call[],\n  blockNumber: number,\n  isDebug?: boolean\n): Promise<{ success: boolean; returnData: string }[]> {\n  console.debug('Fetching chunk', chunk, blockNumber)\n  try {\n    const { returnData } = await multicall.callStatic.multicall(\n      chunk.map((obj) => ({\n        target: obj.address,\n        callData: obj.callData,\n        gasLimit: obj.gasRequired ?? DEFAULT_CALL_GAS_REQUIRED,\n      })),\n      // we aren't passing through the block gas limit we used to create the chunk, because it causes a problem with the integ tests\n      { blockTag: blockNumber }\n    )\n\n    if (isDebug) {\n      returnData.forEach(({ gasUsed, returnData, success }, i) => {\n        if (\n          !success &&\n          returnData.length === 2 &&\n          gasUsed.gte(Math.floor((chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED) * 0.95))\n        ) {\n          console.warn(\n            `A call failed due to requiring ${gasUsed.toString()} vs. allowed ${\n              chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED\n            }`,\n            chunk[i]\n          )\n        }\n      })\n    }\n\n    return returnData\n  } catch (e) {\n    const error = e as any\n    if (error.code === -32000 || error.message?.indexOf('header not found') !== -1) {\n      throw new RetryableError(`header not found for block number ${blockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicall, chunk.slice(0, half), blockNumber),\n          fetchChunk(multicall, chunk.slice(half, chunk.length), blockNumber),\n        ])\n        return c0.concat(c1)\n      }\n    }\n    console.error('Failed to fetch chunk', error)\n    throw error\n  }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: MulticallState['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: MulticallState['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\ninterface FetchChunkContext {\n  actions: MulticallActions\n  dispatch: Dispatch<any>\n  chainId: number\n  latestBlockNumber: number\n  isDebug?: boolean\n}\n\nfunction onFetchChunkSuccess(\n  context: FetchChunkContext,\n  chunk: Call[],\n  result: Array<{ success: boolean; returnData: string }>\n) {\n  const { actions, dispatch, chainId, latestBlockNumber, isDebug } = context\n\n  // split the returned slice into errors and results\n  const { erroredCalls, results } = chunk.reduce<{\n    erroredCalls: Call[]\n    results: { [callKey: string]: string | null }\n  }>(\n    (memo, call, i) => {\n      if (result[i].success) {\n        memo.results[toCallKey(call)] = result[i].returnData ?? null\n      } else {\n        memo.erroredCalls.push(call)\n      }\n      return memo\n    },\n    { erroredCalls: [], results: {} }\n  )\n\n  // dispatch any new results\n  if (Object.keys(results).length > 0)\n    dispatch(\n      actions.updateMulticallResults({\n        chainId,\n        results,\n        blockNumber: latestBlockNumber,\n      })\n    )\n\n  // dispatch any errored calls\n  if (erroredCalls.length > 0) {\n    if (isDebug) {\n      result.forEach((returnData, ix) => {\n        if (!returnData.success) {\n          console.debug('Call failed', chunk[ix], returnData)\n        }\n      })\n    } else {\n      console.debug('Calls errored in fetch', erroredCalls)\n    }\n    dispatch(\n      actions.errorFetchingMulticallResults({\n        calls: erroredCalls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n  }\n}\n\nfunction onFetchChunkFailure(context: FetchChunkContext, chunk: Call[], error: any) {\n  const { actions, dispatch, chainId, latestBlockNumber } = context\n\n  if (error.isCancelledError) {\n    console.debug('Cancelled fetch for blockNumber', latestBlockNumber, chunk, chainId)\n    return\n  }\n  console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n  dispatch(\n    actions.errorFetchingMulticallResults({\n      calls: chunk,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber,\n    })\n  )\n}\n\nexport interface UpdaterProps {\n  context: MulticallContext\n  chainId: number | undefined // For now, one updater is required for each chainId to be watched\n  latestBlockNumber: number | undefined\n  contract: UniswapInterfaceMulticall\n  isDebug?: boolean\n  listenerOptions?: ListenerOptions\n}\n\nfunction Updater(props: UpdaterProps): null {\n  const { context, chainId, latestBlockNumber, contract, isDebug, listenerOptions } = props\n  const { actions, reducerPath } = context\n  const dispatch = useDispatch()\n\n  // set user configured listenerOptions in state for given chain ID.\n  useEffect(() => {\n    if (chainId && listenerOptions) {\n      dispatch(actions.updateListenerOptions({ chainId, listenerOptions }))\n    }\n  }, [chainId, listenerOptions, actions, dispatch])\n\n  const state = useSelector((state: WithMulticallState) => state[reducerPath])\n\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const serializedOutdatedCallKeys = useMemo(() => {\n    const outdatedCallKeys = outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n    return JSON.stringify(outdatedCallKeys.sort())\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !contract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkCalls(calls, CHUNK_GAS_LIMIT)\n\n    if (cancellations.current && cancellations.current.blockNumber !== latestBlockNumber) {\n      cancellations.current.cancellations.forEach((c) => c())\n    }\n\n    dispatch(\n      actions.fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n\n    const fetchChunkContext = {\n      actions,\n      dispatch,\n      chainId,\n      latestBlockNumber,\n      isDebug,\n    }\n    // Execute fetches and gather cancellation callbacks\n    const newCancellations = chunkedCalls.map((chunk) => {\n      const { cancel, promise } = retry(\n        () => fetchChunk(contract, chunk, latestBlockNumber, isDebug),\n        FETCH_RETRY_CONFIG\n      )\n      promise\n        .then((result) => onFetchChunkSuccess(fetchChunkContext, chunk, result))\n        .catch((error) => onFetchChunkFailure(fetchChunkContext, chunk, error))\n      return cancel\n    })\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: newCancellations,\n    }\n  }, [actions, chainId, contract, dispatch, serializedOutdatedCallKeys, latestBlockNumber, isDebug])\n\n  return null\n}\n\nexport function createUpdater(context: MulticallContext) {\n  const UpdaterContextBound = (props: Omit<UpdaterProps, 'context'>) => {\n    return <Updater context={context} {...props} />\n  }\n  return UpdaterContextBound\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/hooks/useDebounce.ts\n\nimport { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { DEFAULT_CHUNK_GAS_REQUIRED } from '../constants'\n\ninterface Bin<T> {\n  calls: T[]\n  cumulativeGasLimit: number\n}\n\n/**\n * Tries to pack a list of items into as few bins as possible using the first-fit bin packing algorithm\n * @param calls the calls to chunk\n * @param chunkGasLimit the gas limit of any one chunk of calls, i.e. bin capacity\n * @param defaultGasRequired the default amount of gas an individual call should cost if not specified\n */\nexport default function chunkCalls<T extends { gasRequired?: number }>(\n  calls: T[],\n  chunkGasLimit: number,\n  defaultGasRequired: number = DEFAULT_CHUNK_GAS_REQUIRED\n): T[][] {\n  return (\n    calls\n      // first sort by gas required\n      .sort((c1, c2) => (c2.gasRequired ?? defaultGasRequired) - (c1.gasRequired ?? defaultGasRequired))\n      // then bin the calls according to the first fit algorithm\n      .reduce<Bin<T>[]>((bins, call) => {\n        const gas = call.gasRequired ?? defaultGasRequired\n        for (const bin of bins) {\n          if (bin.cumulativeGasLimit + gas <= chunkGasLimit) {\n            bin.calls.push(call)\n            bin.cumulativeGasLimit += gas\n            return bins\n          }\n        }\n        // didn't find a bin for the call, make a new bin\n        bins.push({\n          calls: [call],\n          cumulativeGasLimit: gas,\n        })\n        return bins\n      }, [])\n      // pull out just the calls from each bin\n      .map((b) => b.calls)\n  )\n}\n","import type { MulticallContext } from './context'\nimport {\n  useMultiChainMultiContractSingleData as _useMultiChainMultiContractSingleData,\n  useMultiChainSingleContractSingleData as _useMultiChainSingleContractSingleData,\n  useMultipleContractSingleData as _useMultipleContractSingleData,\n  useSingleCallResult as _useSingleCallResult,\n  useSingleContractMultipleData as _useSingleContractMultipleData,\n  useSingleContractWithCallData as _useSingleContractWithCallData,\n} from './hooks'\nimport { createMulticallSlice } from './slice'\nimport { createUpdater } from './updater'\n\ntype RemoveFirstFromTuple<T extends any[]> = T['length'] extends 0\n  ? undefined\n  : ((...b: T) => void) extends (a: any, ...b: infer I) => void\n  ? I\n  : []\ntype ParamsWithoutContext<T extends (...args: any) => any> = RemoveFirstFromTuple<Parameters<T>>\n\nexport interface MulticallOptions {\n  reducerPath?: string\n  // More options can be added here as multicall's capabilities are extended\n}\n\n// Inspired by RTK Query's createApi\nexport function createMulticall(options?: MulticallOptions) {\n  const reducerPath = options?.reducerPath ?? 'multicall'\n  const slice = createMulticallSlice(reducerPath)\n  const { actions, reducer } = slice\n  const context: MulticallContext = { reducerPath, actions }\n\n  const useMultipleContractSingleData = (...args: ParamsWithoutContext<typeof _useMultipleContractSingleData>) =>\n    _useMultipleContractSingleData(context, ...args)\n  const useSingleContractMultipleData = (...args: ParamsWithoutContext<typeof _useSingleContractMultipleData>) =>\n    _useSingleContractMultipleData(context, ...args)\n  const useSingleContractWithCallData = (...args: ParamsWithoutContext<typeof _useSingleContractWithCallData>) =>\n    _useSingleContractWithCallData(context, ...args)\n  const useSingleCallResult = (...args: ParamsWithoutContext<typeof _useSingleCallResult>) =>\n    _useSingleCallResult(context, ...args)\n  const useMultiChainMultiContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainMultiContractSingleData>\n  ) => _useMultiChainMultiContractSingleData(context, ...args)\n  const useMultiChainSingleContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainSingleContractSingleData>\n  ) => _useMultiChainSingleContractSingleData(context, ...args)\n  const hooks = {\n    useMultipleContractSingleData,\n    useSingleContractMultipleData,\n    useSingleContractWithCallData,\n    useSingleCallResult,\n    useMultiChainMultiContractSingleData,\n    useMultiChainSingleContractSingleData,\n  }\n\n  const Updater = createUpdater(context)\n\n  return {\n    reducerPath,\n    reducer,\n    actions,\n    hooks,\n    Updater,\n  }\n}\n"],"names":["INVALID_RESULT","valid","blockNumber","undefined","data","INVALID_CALL_STATE","result","loading","syncing","error","LOADING_CALL_STATE","toCallKey","call","key","address","callData","gasRequired","Number","isSafeInteger","Error","parseCallKey","callKey","pcs","split","includes","length","_extends","parseInt","callsToCallKeys","calls","_calls$filter$map$sor","_calls$filter","filter","c","Boolean","_calls$filter$map","map","sort","callKeysToCalls","callKeys","useCallStates","results","contractInterface","fragment","latestBlockNumber","syncingBlockNumber","useMemo","lowestBlockNumber","reduce","memo","Math","min","max","i","resultFragment","toCallState","callResult","success","decodeFunctionResult","console","debug","isMethodArg","x","BigNumber","isBigNumber","indexOf","isValidMethodArgs","Array","isArray","every","xi","useCallsDataSubscription","context","chainId","listenerOptions","reducerPath","actions","callResults","useSelector","state","defaultListenerOptions","dispatch","useDispatch","serializedCallKeys","JSON","stringify","useEffect","parse","blocksPerFetchFromState","_chainId","blocksPerFetch","blocksPerFetchForChain","_ref","_listenerOptions$bloc","addMulticallListeners","options","removeMulticallListeners","lastResults","useRef","a","b","isChanged","current","_callResults$chainId","push","useSingleContractMultipleData","contract","methodName","callInputs","_contract$interface","getFunction","callDatas","callInput","encodeFunctionData","useMultipleContractSingleData","addresses","_useCallData","useCallData","useSingleCallResult","inputs","_useSingleContractMul","useSingleContractWithCallData","useCallback","_contract$interface2","substring","useMultiChainMultiContractSingleData","chainToBlockNumber","chainToAddresses","_useCallData2","chainIdToResults","chainToCalls","chainCallKeysTuple","getChainIds","chainCallKeysTuples","batch","_step","_iterator","_createForOfIteratorHelperLoose","done","_chainId2","_ref2","_listenerOptions$bloc2","_step$value","value","_step2","_iterator2","_chainId3","_ref3","_listenerOptions$bloc3","_step2$value","_callResults$chainId2","useMultichainCallsDataSubscription","combinedResults","useMultiChainSingleContractSingleData","chainToAddress","multiContractResults","_multiContractResults","_multiContractResults2","chainIdMap","Object","keys","initialState","waitRandom","ms","round","random","Promise","resolve","setTimeout","CancelledError","_Error","_this","_inheritsLoose","_wrapNativeSuper","RetryableError","_Error2","_this2","FETCH_RETRY_CONFIG","n","Infinity","minWait","maxWait","fetchChunk","_x","_x2","_x3","_x4","_fetchChunk","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","multicall","chunk","isDebug","returnData","_error$message","_error$message2","half","_yield$Promise$all","wrap","_context","prev","next","callStatic","obj","_obj$gasRequired","target","gasLimit","blockTag","sent","forEach","_chunk$i$gasRequired2","gasUsed","gte","floor","_chunk$i$gasRequired","warn","toString","abrupt","t0","code","message","all","slice","concat","stop","Updater","props","updateListenerOptions","_useState","debouncedValue","setDebouncedValue","debouncedListeners","useState","callListeners","handler","clearTimeout","cancellations","listeningKeys","allListeners","listeners","keyListeners","previousMin","activeListeningKeys","serializedOutdatedCallKeys","outdatedCallKeys","minDataBlockNumber","fetchingBlockNumber","outdatedListeningKeys","chunkedCalls","chunkGasLimit","defaultGasRequired","c1","c2","_c2$gasRequired","_c1$gasRequired","bins","gas","_call$gasRequired","bin","cumulativeGasLimit","chunkCalls","fetchingMulticallResults","fetchChunkContext","newCancellations","fn","rejectCancelled","completed","_retry","promise","reject","isRetryableError","cancel","then","_chunk$reduce","_result$i$returnData","erroredCalls","updateMulticallResults","ix","errorFetchingMulticallResults","onFetchChunkSuccess","isCancelledError","onFetchChunkFailure","createUpdater","React","_options$reducerPath","createSlice","name","reducers","action","_action$payload","payload","_listeners$chainId","_listeners$chainId$ca","_listeners$chainId$ca2","_action$payload2","_action$payload3","_state$callResults$ch","_current$fetchingBloc","_action$payload4","_state$callResults$ch2","_action$payload5","_state$callResults$ch3","_current$blockNumber","_action$payload6","_state$listenerOption","createMulticallSlice","reducer","hooks","_len","args","_key","_useMultipleContractSingleData","_len2","_key2","_useSingleContractMultipleData","_len3","_key3","_useSingleContractWithCallData","_len4","_key4","_useSingleCallResult","_len5","_key5","_useMultiChainMultiContractSingleData","_len6","_key6","_useMultiChainSingleContractSingleData"],"mappings":"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"}