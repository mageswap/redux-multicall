{"version":3,"file":"redux-multicall.cjs.development.js","sources":["../src/constants.ts","../src/utils/callKeys.ts","../src/utils/callState.ts","../src/validation.ts","../src/hooks.ts","../src/slice.ts","../src/utils/chunkCalls.ts","../src/utils/retry.ts","../src/utils/useDebounce.ts","../src/updater.tsx","../src/create.ts"],"sourcesContent":["import type { CallResult, CallState, ListenerOptions } from './types'\n\nexport const DEFAULT_BLOCKS_PER_FETCH = 1\nexport const DEFAULT_CALL_GAS_REQUIRED = 1_000_000\nexport const DEFAULT_CHUNK_GAS_REQUIRED = 200_000\nexport const CHUNK_GAS_LIMIT = 100_000_000\nexport const CONSERVATIVE_BLOCK_GAS_LIMIT = 10_000_000 // conservative, hard-coded estimate of the current block gas limit\n\n// Consts for hooks\nexport const INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\nexport const INVALID_CALL_STATE: CallState = {\n  valid: false,\n  result: undefined,\n  loading: false,\n  syncing: false,\n  error: false,\n}\nexport const LOADING_CALL_STATE: CallState = {\n  valid: true,\n  result: undefined,\n  loading: true,\n  syncing: true,\n  error: false,\n}\n","import { Call } from '../types'\n\nexport function toCallKey(call: Call): string {\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n\nexport function callsToCallKeys(calls?: Array<Call | undefined>) {\n  return (\n    calls\n      ?.filter((c): c is Call => Boolean(c))\n      ?.map(toCallKey)\n      ?.sort() ?? []\n  )\n}\n\nexport function callKeysToCalls(callKeys: string[]) {\n  if (!callKeys?.length) return null\n  return callKeys.map((key) => parseCallKey(key))\n}\n","import type { FunctionFragment, Interface } from '@ethersproject/abi'\nimport { useMemo } from 'react'\nimport { INVALID_CALL_STATE, LOADING_CALL_STATE } from '../constants'\nimport type { CallResult, CallState, CallStateResult } from '../types'\n\n// Converts CallResult[] to CallState[], only updating if call states have changed.\n// Ensures that CallState results remain referentially stable when unchanged, preventing\n// spurious re-renders which would otherwise occur because mapping always creates a new object.\nexport function useCallStates(\n  results: CallResult[],\n  contractInterface: Interface | undefined,\n  fragment: ((i: number) => FunctionFragment | undefined) | FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState[] {\n  // Avoid refreshing the results with every changing block number (eg latestBlockNumber).\n  // Instead, only refresh the results if they need to be synced - if there is a result which is stale, for which blockNumber < latestBlockNumber.\n  const syncingBlockNumber = useMemo(() => {\n    const lowestBlockNumber = results.reduce<number | undefined>(\n      (memo, result) => (result.blockNumber ? Math.min(memo ?? result.blockNumber, result.blockNumber) : memo),\n      undefined\n    )\n    return Math.max(lowestBlockNumber ?? 0, latestBlockNumber ?? 0)\n  }, [results, latestBlockNumber])\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const resultFragment = typeof fragment === 'function' ? fragment(i) : fragment\n      return toCallState(result, contractInterface, resultFragment, syncingBlockNumber)\n    })\n  }, [contractInterface, fragment, results, syncingBlockNumber])\n}\n\nexport function toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  syncingBlockNumber: number | undefined\n): CallState {\n  if (!callResult || !callResult.valid) {\n    return INVALID_CALL_STATE\n  }\n\n  const { data, blockNumber } = callResult\n  if (!blockNumber || !contractInterface || !fragment || !syncingBlockNumber) {\n    return LOADING_CALL_STATE\n  }\n\n  const success = data && data.length > 2\n  const syncing = blockNumber < syncingBlockNumber\n  let result: CallStateResult | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport type MethodArg = string | number | BigNumber\nexport type MethodArgs = Array<MethodArg | MethodArg[]>\n\nexport function isMethodArg(x: unknown): x is MethodArg {\n  return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nexport function isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { Interface } from '@ethersproject/abi'\nimport { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { batch, useDispatch, useSelector } from 'react-redux'\nimport { INVALID_CALL_STATE, INVALID_RESULT, DEFAULT_BLOCKS_PER_FETCH } from './constants'\nimport type { MulticallContext } from './context'\nimport type { Call, CallResult, CallState, ListenerOptions, ListenerOptionsWithGas, WithMulticallState } from './types'\nimport { callKeysToCalls, callsToCallKeys, toCallKey } from './utils/callKeys'\nimport { toCallState, useCallStates } from './utils/callState'\nimport { isValidMethodArgs, MethodArg } from './validation'\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\n// the lowest level call for subscribing to contract data\nexport function useCallsDataSubscription(\n  context: MulticallContext,\n  chainId: number | undefined,\n  calls: Array<Call | undefined>,\n  listenerOptions?: ListenerOptions\n): CallResult[] {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n  const serializedCallKeys: string = useMemo(() => JSON.stringify(callsToCallKeys(calls)), [calls])\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    const calls = callKeysToCalls(callKeys)\n    if (!chainId || !calls) return\n    const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n    const blocksPerFetchForChain =\n      listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n    dispatch(\n      actions.addMulticallListeners({\n        chainId,\n        calls,\n        options: { blocksPerFetch: blocksPerFetchForChain },\n      })\n    )\n\n    return () => {\n      dispatch(\n        actions.removeMulticallListeners({\n          chainId,\n          calls,\n          options: { blocksPerFetch: blocksPerFetchForChain },\n        })\n      )\n    }\n  }, [actions, chainId, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  const lastResults = useRef<CallResult[]>([])\n  return useMemo(() => {\n    let isChanged = lastResults.current.length !== calls.length\n\n    // Construct results using a for-loop to handle sparse arrays.\n    // Array.prototype.map would skip empty entries.\n    let results: CallResult[] = []\n    for (let i = 0; i < calls.length; ++i) {\n      const call = calls[i]\n      let result = INVALID_RESULT\n      if (chainId && call) {\n        const callResult = callResults[chainId]?.[toCallKey(call)]\n        result = {\n          valid: true,\n          data: callResult?.data && callResult.data !== '0x' ? callResult.data : undefined,\n          blockNumber: callResult?.blockNumber,\n        }\n      }\n\n      isChanged = isChanged || !areCallResultsEqual(result, lastResults.current[i])\n      results.push(result)\n    }\n\n    // Force the results to be referentially stable if they have not changed.\n    // This is necessary because *all* callResults are passed as deps when initially memoizing the results.\n    if (isChanged) {\n      lastResults.current = results\n    }\n    return lastResults.current\n  }, [callResults, calls, chainId])\n}\n\nfunction areCallResultsEqual(a: CallResult, b: CallResult) {\n  return a.valid === b.valid && a.data === b.data && a.blockNumber === b.blockNumber\n}\n\n// Similar to useCallsDataSubscription above but for subscribing to\n// calls to multiple chains at once\nfunction useMultichainCallsDataSubscription(\n  context: MulticallContext,\n  chainToCalls: Record<number, Array<Call | undefined>>,\n  listenerOptions?: ListenerOptions\n): Record<number, CallResult[]> {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const defaultListenerOptions = useSelector((state: WithMulticallState) => state[reducerPath].listenerOptions)\n  const dispatch = useDispatch()\n\n  const serializedCallKeys: string = useMemo(() => {\n    const sortedChainIds = getChainIds(chainToCalls).sort()\n    const chainCallKeysTuple = sortedChainIds.map((chainId) => {\n      const calls = chainToCalls[chainId]\n      const callKeys = callsToCallKeys(calls)\n      // Note, using a tuple to ensure consistent order when serialized\n      return [chainId, callKeys]\n    })\n    return JSON.stringify(chainCallKeysTuple)\n  }, [chainToCalls])\n\n  useEffect(() => {\n    const chainCallKeysTuples: Array<[number, string[]]> = JSON.parse(serializedCallKeys)\n    if (!chainCallKeysTuples?.length) return\n\n    batch(() => {\n      for (const [chainId, callKeys] of chainCallKeysTuples) {\n        const calls = callKeysToCalls(callKeys)\n        if (!calls?.length) continue\n        const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n        const blocksPerFetchForChain =\n          listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n\n        dispatch(\n          actions.addMulticallListeners({\n            chainId,\n            calls,\n            options: { blocksPerFetch: blocksPerFetchForChain },\n          })\n        )\n      }\n    })\n\n    return () => {\n      batch(() => {\n        for (const [chainId, callKeys] of chainCallKeysTuples) {\n          const calls = callKeysToCalls(callKeys)\n          if (!calls?.length) continue\n          const blocksPerFetchFromState = (defaultListenerOptions ?? {})[chainId]?.blocksPerFetch\n          const blocksPerFetchForChain =\n            listenerOptions?.blocksPerFetch ?? blocksPerFetchFromState ?? DEFAULT_BLOCKS_PER_FETCH\n          dispatch(\n            actions.removeMulticallListeners({\n              chainId,\n              calls,\n              options: { blocksPerFetch: blocksPerFetchForChain },\n            })\n          )\n        }\n      })\n    }\n  }, [actions, dispatch, listenerOptions, serializedCallKeys, defaultListenerOptions])\n\n  return useMemo(\n    () =>\n      getChainIds(chainToCalls).reduce((result, chainId) => {\n        const calls = chainToCalls[chainId]\n        result[chainId] = calls.map<CallResult>((call) => {\n          if (!chainId || !call) return INVALID_RESULT\n          const result = callResults[chainId]?.[toCallKey(call)]\n          const data = result?.data && result.data !== '0x' ? result.data : undefined\n          return { valid: true, data, blockNumber: result?.blockNumber }\n        })\n        return result\n      }, {} as Record<number, CallResult[]>),\n    [callResults, chainToCalls]\n  )\n}\n\n// formats many calls to a single function on a single contract, with the function name and inputs specified\nexport function useSingleContractMultipleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create ethers function fragment\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  // Get encoded call data. Note can't use useCallData below b.c. this is  for a list of CallInputs\n  const callDatas = useMemo(() => {\n    if (!contract || !fragment) return []\n    return callInputs.map<string | undefined>((callInput) =>\n      isValidMethodArgs(callInput) ? contract.interface.encodeFunctionData(fragment, callInput) : undefined\n    )\n  }, [callInputs, contract, fragment])\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call | undefined>((callData) => {\n      if (!callData) return undefined\n      return {\n        address: contract.address,\n        callData,\n        gasRequired,\n      }\n    })\n  }, [contract, callDatas, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  return useCallStates(results, contract?.interface, fragment, latestBlockNumber)\n}\n\nexport function useMultipleContractSingleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!callData) return []\n    return addresses.map<Call | undefined>((address) => {\n      if (!address) return undefined\n      return { address, callData, gasRequired }\n    })\n  }, [addresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  return useCallStates(results, contractInterface, fragment, latestBlockNumber)\n}\n\nexport function useSingleCallResult(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): CallState {\n  const callInputs = useMemo(() => [inputs], [inputs])\n  return (\n    useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, callInputs, options)[0] ??\n    INVALID_CALL_STATE\n  )\n}\n\n// formats many calls to any number of functions on a single contract, with only the calldata specified\nexport function useSingleContractWithCallData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  callDatas: string[],\n  options?: Partial<ListenerOptionsWithGas>\n): CallState[] {\n  const { gasRequired } = options ?? {}\n\n  // Create call objects\n  const calls = useMemo(() => {\n    if (!contract) return []\n    return callDatas.map<Call>((callData) => ({\n      address: contract.address,\n      callData,\n      gasRequired,\n    }))\n  }, [callDatas, contract, gasRequired])\n\n  // Subscribe to call data\n  const results = useCallsDataSubscription(context, chainId, calls, options as ListenerOptions)\n  const fragment = useCallback(\n    (i: number) => contract?.interface?.getFunction(callDatas[i].substring(0, 10)),\n    [callDatas, contract]\n  )\n  return useCallStates(results, contract?.interface, fragment, latestBlockNumber)\n}\n\n// Similar to useMultipleContractSingleData but instead of multiple contracts on one chain,\n// this is for querying compatible contracts on multiple chains\nexport function useMultiChainMultiContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddresses: Record<number, Array<string | undefined>>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState[]> {\n  const { gasRequired } = options ?? {}\n\n  const { fragment, callData } = useCallData(methodName, contractInterface, callInputs)\n\n  // Create call objects\n  const chainToCalls = useMemo(() => {\n    if (!callData || !chainToAddresses) return {}\n    return getChainIds(chainToAddresses).reduce((result, chainId) => {\n      const addresses = chainToAddresses[chainId]\n      const calls = addresses.map<Call | undefined>((address) => {\n        if (!address) return undefined\n        return { address, callData, gasRequired }\n      })\n      result[chainId] = calls\n      return result\n    }, {} as Record<number, Array<Call | undefined>>)\n  }, [chainToAddresses, callData, gasRequired])\n\n  // Subscribe to call data\n  const chainIdToResults = useMultichainCallsDataSubscription(context, chainToCalls, options as ListenerOptions)\n\n  // TODO(WEB-2097): Multichain states are not referentially stable, because they cannot use the\n  // same codepath (eg useCallStates).\n  return useMemo(() => {\n    return getChainIds(chainIdToResults).reduce((combinedResults, chainId) => {\n      const latestBlockNumber = chainToBlockNumber?.[chainId]\n      const results = chainIdToResults[chainId]\n      combinedResults[chainId] = results.map((result) =>\n        toCallState(result, contractInterface, fragment, latestBlockNumber)\n      )\n      return combinedResults\n    }, {} as Record<number, CallState[]>)\n  }, [fragment, contractInterface, chainIdToResults, chainToBlockNumber])\n}\n\n// Similar to useSingleCallResult but instead of one contract on one chain,\n// this is for querying a contract on multiple chains\nexport function useMultiChainSingleContractSingleData(\n  context: MulticallContext,\n  chainToBlockNumber: Record<number, number | undefined>,\n  chainToAddress: Record<number, string | undefined>,\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptionsWithGas>\n): Record<number, CallState> {\n  // This hook uses the more flexible useMultiChainMultiContractSingleData internally,\n  // but transforms the inputs and outputs for convenience\n  const chainIdToAddresses = useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = [chainToAddress[chainId]]\n      return result\n    }, {} as Record<number, Array<string | undefined>>)\n  }, [chainToAddress])\n\n  const multiContractResults = useMultiChainMultiContractSingleData(\n    context,\n    chainToBlockNumber,\n    chainIdToAddresses,\n    contractInterface,\n    methodName,\n    callInputs,\n    options\n  )\n\n  return useMemo(() => {\n    return getChainIds(chainToAddress).reduce((result, chainId) => {\n      result[chainId] = multiContractResults[chainId]?.[0] ?? INVALID_CALL_STATE\n      return result\n    }, {} as Record<number, CallState>)\n  }, [chainToAddress, multiContractResults])\n}\n\nfunction useCallData(\n  methodName: string,\n  contractInterface: Interface | null | undefined,\n  callInputs: OptionalMethodInputs | undefined\n) {\n  // Create ethers function fragment\n  const fragment = useMemo(() => contractInterface?.getFunction(methodName), [contractInterface, methodName])\n  // Get encoded call data\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface?.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n  return { fragment, callData }\n}\n\nfunction getChainIds(chainIdMap: Record<number, any>) {\n  return Object.keys(chainIdMap).map((c) => parseInt(c, 10))\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport {\n  MulticallFetchingPayload,\n  MulticallListenerPayload,\n  MulticallResultsPayload,\n  MulticallState,\n  MulticallListenerOptionsPayload,\n} from './types'\nimport { toCallKey } from './utils/callKeys'\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport function createMulticallSlice(reducerPath: string) {\n  return createSlice({\n    name: reducerPath,\n    initialState,\n    reducers: {\n      addMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n        listeners[chainId] = listeners[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n          listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n        })\n      },\n\n      removeMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n\n      fetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current) {\n            state.callResults[chainId][callKey] = {\n              fetchingBlockNumber,\n            }\n          } else {\n            if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n            state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      errorFetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current || typeof current.fetchingBlockNumber !== 'number') return // only should be dispatched if we are already fetching\n          if (current.fetchingBlockNumber <= fetchingBlockNumber) {\n            delete current.fetchingBlockNumber\n            current.data = null\n            current.blockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      updateMulticallResults: (state, action: PayloadAction<MulticallResultsPayload>) => {\n        const { chainId, results, blockNumber } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        Object.keys(results).forEach((callKey) => {\n          const current = state.callResults[chainId][callKey]\n          if ((current?.blockNumber ?? 0) > blockNumber) return\n          if (current?.data === results[callKey] && current?.blockNumber === blockNumber) return\n          state.callResults[chainId][callKey] = {\n            data: results[callKey],\n            blockNumber,\n          }\n        })\n      },\n\n      updateListenerOptions: (state, action: PayloadAction<MulticallListenerOptionsPayload>) => {\n        const { chainId, listenerOptions } = action.payload\n        state.listenerOptions = state.listenerOptions ?? {}\n        state.listenerOptions[chainId] = listenerOptions\n      },\n    },\n  })\n}\n\nexport type MulticallActions = ReturnType<typeof createMulticallSlice>['actions']\n","import { DEFAULT_CHUNK_GAS_REQUIRED } from '../constants'\n\ninterface Bin<T> {\n  calls: T[]\n  cumulativeGasLimit: number\n}\n\n/**\n * Tries to pack a list of items into as few bins as possible using the first-fit bin packing algorithm\n * @param calls the calls to chunk\n * @param chunkGasLimit the gas limit of any one chunk of calls, i.e. bin capacity\n * @param defaultGasRequired the default amount of gas an individual call should cost if not specified\n */\nexport default function chunkCalls<T extends { gasRequired?: number }>(\n  calls: T[],\n  chunkGasLimit: number,\n  defaultGasRequired: number = DEFAULT_CHUNK_GAS_REQUIRED\n): T[][] {\n  return (\n    calls\n      // first sort by gas required\n      .sort((c1, c2) => (c2.gasRequired ?? defaultGasRequired) - (c1.gasRequired ?? defaultGasRequired))\n      // then bin the calls according to the first fit algorithm\n      .reduce<Bin<T>[]>((bins, call) => {\n        const gas = call.gasRequired ?? defaultGasRequired\n        for (const bin of bins) {\n          if (bin.cumulativeGasLimit + gas <= chunkGasLimit) {\n            bin.calls.push(call)\n            bin.cumulativeGasLimit += gas\n            return bins\n          }\n        }\n        // didn't find a bin for the call, make a new bin\n        bins.push({\n          calls: [call],\n          cumulativeGasLimit: gas,\n        })\n        return bins\n      }, [])\n      // pull out just the calls from each bin\n      .map((b) => b.calls)\n  )\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/utils/retry.ts\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nclass CancelledError extends Error {\n  public isCancelledError: true = true\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {\n  public isRetryableError: true = true\n}\n\nexport interface RetryOptions {\n  n: number\n  minWait: number\n  maxWait: number\n}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: RetryOptions\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error as any).isRetryableError) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/hooks/useDebounce.ts\n\nimport { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import React, { Dispatch, useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { UniswapInterfaceMulticall } from './abi/types'\nimport { CHUNK_GAS_LIMIT, DEFAULT_CALL_GAS_REQUIRED } from './constants'\nimport type { MulticallContext } from './context'\nimport type { MulticallActions } from './slice'\nimport type { Call, MulticallState, WithMulticallState, ListenerOptions } from './types'\nimport { parseCallKey, toCallKey } from './utils/callKeys'\nimport chunkCalls from './utils/chunkCalls'\nimport { retry, RetryableError } from './utils/retry'\nimport useDebounce from './utils/useDebounce'\n\nconst FETCH_RETRY_CONFIG = {\n  n: Infinity,\n  minWait: 1000,\n  maxWait: 2500,\n}\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicall multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param blockNumber block number passed as the block tag in the eth_call\n */\nasync function fetchChunk(\n  multicall: UniswapInterfaceMulticall,\n  chunk: Call[],\n  blockNumber: number,\n  isDebug?: boolean\n): Promise<{ success: boolean; returnData: string }[]> {\n  console.debug('Fetching chunk', chunk, blockNumber)\n  try {\n    const { returnData } = await multicall.callStatic.multicall(\n      chunk.map((obj) => ({\n        target: obj.address,\n        callData: obj.callData,\n        gasLimit: obj.gasRequired ?? DEFAULT_CALL_GAS_REQUIRED,\n      })),\n      // we aren't passing through the block gas limit we used to create the chunk, because it causes a problem with the integ tests\n      { blockTag: blockNumber }\n    )\n\n    if (isDebug) {\n      returnData.forEach(({ gasUsed, returnData, success }, i) => {\n        if (\n          !success &&\n          returnData.length === 2 &&\n          gasUsed.gte(Math.floor((chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED) * 0.95))\n        ) {\n          console.warn(\n            `A call failed due to requiring ${gasUsed.toString()} vs. allowed ${\n              chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED\n            }`,\n            chunk[i]\n          )\n        }\n      })\n    }\n\n    return returnData\n  } catch (e) {\n    const error = e as any\n    if (error.code === -32000 || error.message?.indexOf('header not found') !== -1) {\n      throw new RetryableError(`header not found for block number ${blockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicall, chunk.slice(0, half), blockNumber),\n          fetchChunk(multicall, chunk.slice(half, chunk.length), blockNumber),\n        ])\n        return c0.concat(c1)\n      }\n    }\n    console.error('Failed to fetch chunk', error)\n    throw error\n  }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: MulticallState['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: MulticallState['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\ninterface FetchChunkContext {\n  actions: MulticallActions\n  dispatch: Dispatch<any>\n  chainId: number\n  latestBlockNumber: number\n  isDebug?: boolean\n}\n\nfunction onFetchChunkSuccess(\n  context: FetchChunkContext,\n  chunk: Call[],\n  result: Array<{ success: boolean; returnData: string }>\n) {\n  const { actions, dispatch, chainId, latestBlockNumber, isDebug } = context\n\n  // split the returned slice into errors and results\n  const { erroredCalls, results } = chunk.reduce<{\n    erroredCalls: Call[]\n    results: { [callKey: string]: string | null }\n  }>(\n    (memo, call, i) => {\n      if (result[i].success) {\n        memo.results[toCallKey(call)] = result[i].returnData ?? null\n      } else {\n        memo.erroredCalls.push(call)\n      }\n      return memo\n    },\n    { erroredCalls: [], results: {} }\n  )\n\n  // dispatch any new results\n  if (Object.keys(results).length > 0)\n    dispatch(\n      actions.updateMulticallResults({\n        chainId,\n        results,\n        blockNumber: latestBlockNumber,\n      })\n    )\n\n  // dispatch any errored calls\n  if (erroredCalls.length > 0) {\n    if (isDebug) {\n      result.forEach((returnData, ix) => {\n        if (!returnData.success) {\n          console.debug('Call failed', chunk[ix], returnData)\n        }\n      })\n    } else {\n      console.debug('Calls errored in fetch', erroredCalls)\n    }\n    dispatch(\n      actions.errorFetchingMulticallResults({\n        calls: erroredCalls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n  }\n}\n\nfunction onFetchChunkFailure(context: FetchChunkContext, chunk: Call[], error: any) {\n  const { actions, dispatch, chainId, latestBlockNumber } = context\n\n  if (error.isCancelledError) {\n    console.debug('Cancelled fetch for blockNumber', latestBlockNumber, chunk, chainId)\n    return\n  }\n  console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n  dispatch(\n    actions.errorFetchingMulticallResults({\n      calls: chunk,\n      chainId,\n      fetchingBlockNumber: latestBlockNumber,\n    })\n  )\n}\n\nexport interface UpdaterProps {\n  context: MulticallContext\n  chainId: number | undefined // For now, one updater is required for each chainId to be watched\n  latestBlockNumber: number | undefined\n  contract: UniswapInterfaceMulticall\n  isDebug?: boolean\n  listenerOptions?: ListenerOptions\n}\n\nfunction Updater(props: UpdaterProps): null {\n  const { context, chainId, latestBlockNumber, contract, isDebug, listenerOptions } = props\n  const { actions, reducerPath } = context\n  const dispatch = useDispatch()\n\n  // set user configured listenerOptions in state for given chain ID.\n  useEffect(() => {\n    if (chainId && listenerOptions) {\n      dispatch(actions.updateListenerOptions({ chainId, listenerOptions }))\n    }\n  }, [chainId, listenerOptions, actions, dispatch])\n\n  const state = useSelector((state: WithMulticallState) => state[reducerPath])\n\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const serializedOutdatedCallKeys = useMemo(() => {\n    const outdatedCallKeys = outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n    return JSON.stringify(outdatedCallKeys.sort())\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !contract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkCalls(calls, CHUNK_GAS_LIMIT)\n\n    if (cancellations.current && cancellations.current.blockNumber !== latestBlockNumber) {\n      cancellations.current.cancellations.forEach((c) => c())\n    }\n\n    dispatch(\n      actions.fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n\n    const fetchChunkContext = {\n      actions,\n      dispatch,\n      chainId,\n      latestBlockNumber,\n      isDebug,\n    }\n    // Execute fetches and gather cancellation callbacks\n    const newCancellations = chunkedCalls.map((chunk) => {\n      const { cancel, promise } = retry(\n        () => fetchChunk(contract, chunk, latestBlockNumber, isDebug),\n        FETCH_RETRY_CONFIG\n      )\n      promise\n        .then((result) => onFetchChunkSuccess(fetchChunkContext, chunk, result))\n        .catch((error) => onFetchChunkFailure(fetchChunkContext, chunk, error))\n      return cancel\n    })\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: newCancellations,\n    }\n  }, [actions, chainId, contract, dispatch, serializedOutdatedCallKeys, latestBlockNumber, isDebug])\n\n  return null\n}\n\nexport function createUpdater(context: MulticallContext) {\n  const UpdaterContextBound = (props: Omit<UpdaterProps, 'context'>) => {\n    return <Updater context={context} {...props} />\n  }\n  return UpdaterContextBound\n}\n","import type { MulticallContext } from './context'\nimport {\n  useMultiChainMultiContractSingleData as _useMultiChainMultiContractSingleData,\n  useMultiChainSingleContractSingleData as _useMultiChainSingleContractSingleData,\n  useMultipleContractSingleData as _useMultipleContractSingleData,\n  useSingleCallResult as _useSingleCallResult,\n  useSingleContractMultipleData as _useSingleContractMultipleData,\n  useSingleContractWithCallData as _useSingleContractWithCallData,\n} from './hooks'\nimport { createMulticallSlice } from './slice'\nimport { createUpdater } from './updater'\n\ntype RemoveFirstFromTuple<T extends any[]> = T['length'] extends 0\n  ? undefined\n  : ((...b: T) => void) extends (a: any, ...b: infer I) => void\n  ? I\n  : []\ntype ParamsWithoutContext<T extends (...args: any) => any> = RemoveFirstFromTuple<Parameters<T>>\n\nexport interface MulticallOptions {\n  reducerPath?: string\n  // More options can be added here as multicall's capabilities are extended\n}\n\n// Inspired by RTK Query's createApi\nexport function createMulticall(options?: MulticallOptions) {\n  const reducerPath = options?.reducerPath ?? 'multicall'\n  const slice = createMulticallSlice(reducerPath)\n  const { actions, reducer } = slice\n  const context: MulticallContext = { reducerPath, actions }\n\n  const useMultipleContractSingleData = (...args: ParamsWithoutContext<typeof _useMultipleContractSingleData>) =>\n    _useMultipleContractSingleData(context, ...args)\n  const useSingleContractMultipleData = (...args: ParamsWithoutContext<typeof _useSingleContractMultipleData>) =>\n    _useSingleContractMultipleData(context, ...args)\n  const useSingleContractWithCallData = (...args: ParamsWithoutContext<typeof _useSingleContractWithCallData>) =>\n    _useSingleContractWithCallData(context, ...args)\n  const useSingleCallResult = (...args: ParamsWithoutContext<typeof _useSingleCallResult>) =>\n    _useSingleCallResult(context, ...args)\n  const useMultiChainMultiContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainMultiContractSingleData>\n  ) => _useMultiChainMultiContractSingleData(context, ...args)\n  const useMultiChainSingleContractSingleData = (\n    ...args: ParamsWithoutContext<typeof _useMultiChainSingleContractSingleData>\n  ) => _useMultiChainSingleContractSingleData(context, ...args)\n  const hooks = {\n    useMultipleContractSingleData,\n    useSingleContractMultipleData,\n    useSingleContractWithCallData,\n    useSingleCallResult,\n    useMultiChainMultiContractSingleData,\n    useMultiChainSingleContractSingleData,\n  }\n\n  const Updater = createUpdater(context)\n\n  return {\n    reducerPath,\n    reducer,\n    actions,\n    hooks,\n    Updater,\n  }\n}\n"],"names":["DEFAULT_BLOCKS_PER_FETCH","DEFAULT_CALL_GAS_REQUIRED","DEFAULT_CHUNK_GAS_REQUIRED","CHUNK_GAS_LIMIT","CONSERVATIVE_BLOCK_GAS_LIMIT","INVALID_RESULT","valid","blockNumber","undefined","data","NEVER_RELOAD","blocksPerFetch","Infinity","INVALID_CALL_STATE","result","loading","syncing","error","LOADING_CALL_STATE","toCallKey","call","key","address","callData","gasRequired","Number","isSafeInteger","Error","parseCallKey","callKey","pcs","split","includes","length","_extends","parseInt","callsToCallKeys","calls","_calls$filter$map$sor","_calls$filter","filter","c","Boolean","_calls$filter$map","map","sort","callKeysToCalls","callKeys","useCallStates","results","contractInterface","fragment","latestBlockNumber","syncingBlockNumber","useMemo","lowestBlockNumber","reduce","memo","Math","min","max","i","resultFragment","toCallState","callResult","success","decodeFunctionResult","console","debug","isMethodArg","x","BigNumber","isBigNumber","indexOf","isValidMethodArgs","Array","isArray","every","xi","useCallsDataSubscription","context","chainId","listenerOptions","reducerPath","actions","callResults","useSelector","state","defaultListenerOptions","dispatch","useDispatch","serializedCallKeys","JSON","stringify","useEffect","parse","blocksPerFetchFromState","_chainId","blocksPerFetchForChain","_ref","_listenerOptions$bloc","addMulticallListeners","options","removeMulticallListeners","lastResults","useRef","isChanged","current","_callResults$chainId","areCallResultsEqual","push","a","b","useMultichainCallsDataSubscription","chainToCalls","sortedChainIds","getChainIds","chainCallKeysTuple","chainCallKeysTuples","batch","_iterator","_createForOfIteratorHelperLoose","_step","done","_chainId2","_ref2","_listenerOptions$bloc2","_step$value","value","_iterator2","_step2","_chainId3","_ref3","_listenerOptions$bloc3","_step2$value","_callResults$chainId2","useSingleContractMultipleData","contract","methodName","callInputs","_ref4","_contract$interface","getFunction","callDatas","callInput","encodeFunctionData","useMultipleContractSingleData","addresses","_ref5","_useCallData","useCallData","useSingleCallResult","inputs","_useSingleContractMul","useSingleContractWithCallData","_ref6","useCallback","_contract$interface2","substring","useMultiChainMultiContractSingleData","chainToBlockNumber","chainToAddresses","_ref7","_useCallData2","chainIdToResults","combinedResults","useMultiChainSingleContractSingleData","chainToAddress","chainIdToAddresses","multiContractResults","_multiContractResults","_multiContractResults2","chainIdMap","Object","keys","initialState","createMulticallSlice","createSlice","name","reducers","action","_action$payload","payload","listeners","callListeners","_listeners$chainId","forEach","_listeners$chainId$ca","_listeners$chainId$ca2","_action$payload2","fetchingMulticallResults","_action$payload3","fetchingBlockNumber","_state$callResults$ch","_current$fetchingBloc","errorFetchingMulticallResults","_action$payload4","_state$callResults$ch2","updateMulticallResults","_action$payload5","_state$callResults$ch3","_current$blockNumber","updateListenerOptions","_action$payload6","_state$listenerOption","chunkCalls","chunkGasLimit","defaultGasRequired","c1","c2","_c2$gasRequired","_c1$gasRequired","bins","gas","_call$gasRequired","bin","cumulativeGasLimit","wait","ms","Promise","resolve","setTimeout","waitRandom","round","random","CancelledError","_Error","_inheritsLoose","_this","_wrapNativeSuper","RetryableError","_Error2","_this2","retry","fn","n","minWait","maxWait","completed","rejectCancelled","promise","_asyncToGenerator","_regeneratorRuntime","mark","_callee","reject","wrap","_callee$","_context","prev","next","sent","abrupt","t0","isRetryableError","stop","_x","_x2","apply","arguments","cancel","useDebounce","delay","_useState","useState","debouncedValue","setDebouncedValue","handler","clearTimeout","FETCH_RETRY_CONFIG","fetchChunk","_x3","_x4","_fetchChunk","multicall","chunk","isDebug","_yield$multicall$call","returnData","_error$message","_error$message2","half","_yield$Promise$all","c0","callStatic","obj","_obj$gasRequired","target","gasLimit","blockTag","gasUsed","gte","floor","_chunk$i$gasRequired","_chunk$i$gasRequired2","warn","toString","code","message","all","slice","concat","activeListeningKeys","allListeners","keyListeners","previousMin","outdatedListeningKeys","listeningKeys","minDataBlockNumber","onFetchChunkSuccess","_chunk$reduce","_result$i$returnData","erroredCalls","ix","onFetchChunkFailure","isCancelledError","Updater","props","debouncedListeners","cancellations","serializedOutdatedCallKeys","outdatedCallKeys","chunkedCalls","fetchChunkContext","newCancellations","_retry","then","createUpdater","UpdaterContextBound","React","createMulticall","_options$reducerPath","reducer","_len","args","_key","_useMultipleContractSingleData","_len2","_key2","_useSingleContractMultipleData","_len3","_key3","_useSingleContractWithCallData","_len4","_key4","_useSingleCallResult","_len5","_key5","_useMultiChainMultiContractSingleData","_len6","_key6","_useMultiChainSingleContractSingleData","hooks"],"mappings":"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"}